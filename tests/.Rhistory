n
gabor$duration
)
stan.file('test.stan')
devtools::install('~/cs/code/r/bhsdtr2')
3
devtools::install('~/cs/code/r/bhsdtr2')
3
plot(m2)
devtools::install('~/cs/code/r/bhsdtr2')
3
plot(m2)
m2
plot(m2)
devtools::install('~/cs/code/r/bhsdtr2')
3
plot(m2)
m2$adata
devtools::install('~/cs/code/r/bhsdtr2')
3
plot(m2)
data.frame(x = 1:2)[,1]
plot.bhsdtr_model
devtools::install('~/cs/code/r/bhsdtr2')
3
plot.bhsdtr_model
methods(plot)
methods(plot, 'bhsdtr_model')
plot(m2)
nrow(m2$adata$data)
adata$data[,1]
m2$adata$data[,1]
plot(m2)
n
plot(m2)
m2$adata$data[,1]
m2$adata$data = data.frame(x = c(1, 1))
m2$adata$data[,1]
ncol(m2$adata$data)
devtools::install('~/cs/code/r/bhsdtr2')
3
plot(m2)
samples(m2, 'dprim')
samples(m2, 'thr')
n
n
n
(m2 = bhsdtr(c(dprim ~ 1 + (1 | id), thr ~ 1 + (1 | id)), r ~ stim,
             gabor[(gabor$order == 'DECISION-RATING') & (gabor$duration == '32 ms'),],
             method = F))
m2$sdata$delta_group_1
m2$sdata$delta_group_1_original
m2$sdata$delta_group_1
merged.extract = function(m, par, group = NULL){
    if(is.null(group)){
        par.name = sprintf('%s_fixed', par)
    }else{
        par.name = sprintf('%s_random_%d', par, group)
    }
    size = m$sdata[[sprintf('%s_size', par)]]
    res1 = extract(m$stanfit, par.name, permute = F)
    array(res1, c(dim(res1)[1] * dim(res1)[2], size, dim(res1)[3] / size))
}

res = merged.extract(m2, 'delta', 1)
dim(res)
m2 = m
m = m2
m2
group =  1
par = 'delta'
dim(res1)
m = m2
dim(res1)
dim(extract(m, 'delta_random_1'))
dim(extract(m2, 'delta_random_1'))
dim(extract(m2$stanfit, 'delta_random_1'))
dim(extract(m2$stanfit)[['delta_random_1']])
dim(extract(m2$stanfit, permute = F)[['delta_random_1']])
res = extract(m2$stanfit, permute = F)
dim(res)
?extract
dim(res1)
dim(res1)
dimnames(res1)
dim(res1)
res1 =         array(res1, c(dim(res1)[1] * dim(res1)[2], group.size, size))

dim(res1)
res = array(res1, c(dim(res1)[1] * dim(res1)[2], group.size, size, dim(res1)[5]))
dim(res)
mean(res)
is.na(res)
sum(is.na(res))
merged.extract = function(m, par, group = NULL){
    if(is.null(group)){
        par.name = sprintf('%s_fixed', par)
    }else{
        par.name = sprintf('%s_random_%d', par, group)
        group.size = m$sdata[[sprintf('%s_group_max_%d', par, group)]]
    }
    size = m$sdata[[sprintf('%s_size', par)]]
    res1 = extract(m$stanfit, par.name, permute = F)
    if(!is.null(group)){
        res1 = array(res1, c(dim(res1)[1:2], group.size, size, dim(res1)[3] / (group.size * size)))
        array(res1, c(dim(res1)[1] * dim(res1)[2], group.size, size, dim(res1)[5]))
    }
    array(res1, c(dim(res1)[1] * dim(res1)[2], size, dim(res1)[3] / size))
}

res = merged.extract(m2, 'delta', 1)
dim(res)
group
merged.extract = function(m, par, group = NULL){
    if(is.null(group)){
        par.name = sprintf('%s_fixed', par)
    }else{
        par.name = sprintf('%s_random_%d', par, group)
        group.size = m$sdata[[sprintf('%s_group_max_%d', par, group)]]
    }
    size = m$sdata[[sprintf('%s_size', par)]]
    res1 = extract(m$stanfit, par.name, permute = F)
    if(!is.null(group)){
        res1 = array(res1, c(dim(res1)[1:2], group.size, size, dim(res1)[3] / (group.size * size)))
        array(res1, c(dim(res1)[1] * dim(res1)[2], group.size, size, dim(res1)[5]))
    }else{
        array(res1, c(dim(res1)[1] * dim(res1)[2], size, dim(res1)[3] / size))
    }
}
res = merged.extract(m2, 'delta', 1)
dim(res)
dim(dprim)
dim(thr)
dim(dprim)
dim(thr)
attr(dprim, 'data')
dim(df)
dim(dprim)
dprim[1:10,,]
res[1:100,,]
dim(delta)
delta[1:100,,]
exp(delta[1:100,,])
res[1:100,,]
dprim
m2$links
include.vars = NULL
group = 1
par = 'delta'
m = m2
method = 'stan'
group.index
range(group.index)
dim(data)
dim(data)
condition.names
dim(samples.fixef)
dim(samples.ranef)
samples.ranef[1:100,,,]
dim(result)
result[1:100,,]
exp(result[1:100,,])
dim(samples.fixef)
apply(samples.fixef[,1,], 2, range)
dim(samples.ranef)
apply(samples.ranef[,,1,1], 2, range)
apply(samples.ranef[,,1,2], 2, range)
dim(samples.ranef)
dim(result)
dim(result.ranef)
dim(result.fixef)
dim(result)
dim(dprim)
apply(dprim[,1,], 2, range)
head(df)
head(df)
head(df)
head(df)
head(df)
devtools::install('~/cs/code/r/bhsdtr2')
head(dr)
head(d)
head(d)
d$id
d$id
head(d)
rid
rid
rid
length(unique(tolower(did)))
length(unique(did))
length(unique(tolower(rid)))
length(unique(rid))
f = files[1]
head(d)
dim(d)
tail(d)
i = 1
i = 1
len
tail(d)
head(df)
f
d[1:10,  1:3]
len
head(df)
i = 1
head(df)
head(df)
df$rating
table(df$rating)
i = 1
part
head(df)
head(df)
head(df)
length(unique(df$id))
length(unique(dr$subject))
n
1
head(df)
predictor.names = function(model, ...){
    vnames = NULL
    for(v in list(...))
        vnames = c(vnames, get_all_vars(model$fixed[[v]], model$data))
    vnames
}

predictor.names(m2, 'delta')
predictor.names = function(model, ...){
    vnames = NULL
    for(v in list(...))
        vnames = c(vnames, names(get_all_vars(model$fixed[[v]], model$data)))
    vnames
}

predictor.names(m2, 'delta')
predictor.names(m2, 'delta', 'gamma')
aggr.formula
head(res)
res.rows
res.rows
df.rows
df$thr
group = NULL
group = NULL
m2$sdata$stim_sign
m2.jmap$resp
m2.jmap$stim
model = m2.jmap
group.name
head(df)
acc
head(model$data)
aggr.formula
model = m2.jmap
head(res)
head(df)
acc.obs
acc.fit
head(df)
model = m2.jmap
group = 1
dprim
crit
dim(res)
res
head(df)
dim(df)
dim(res)
class(df)
acc.obs
head(df)
acc.obs
acc
install.packages('here')
library(here)
devtools::install('~/cs/code/r/bhsdtr2')
devtools::install('~/cs/code/r/bhsdtr2')
cumulative
cum
cum
formula
frm = r ~ duration * order + (1 | id)
frm[-2]
frm[-1]
frm[1]
frm[-3]
form
frm[[2]]
resp
form
frm
frm = r ~ duration * order + (1 | id)
as.character(form)
paste(as.character(form), collapse = ' ')
form
frm
form
cum = function(formula, ...){
    resp = as.character(formula[[2]])
    theta.form = as.formula(paste(c('theta', as.character(formula[-2])), collapse = ' '))
    bhsdtr(c(eta ~ 1, theta.form), as.formula(sprintf('%s ~ 1', resp)), ...)
}

cum = function(formula, ...){
    resp = as.character(formula[[2]])
    theta.form = as.formula(paste(c('theta', as.character(formula[-2])), collapse = ' '))
    bhsdtr(c(mean ~ 1, theta.form), as.formula(sprintf('%s ~ 1', resp)), ...)
}

cum = function(formula, ...){
    resp = as.character(formula[[2]])
    theta.form = as.formula(paste(c('thr', as.character(formula[-2])), collapse = ' '))
    bhsdtr(c(mean ~ 1, theta.form), as.formula(sprintf('%s ~ 1', resp)), ...)
}

devtools::install('~/cs/code/r/bhsdtr2')
devtools::install('~/cs/code/r/bhsdtr2')
devtools::install('~/cs/code/r/bhsdtr2')
devtools::install('~/cs/code/r/bhsdtr2')
devtools::install('~/cs/code/r/bhsdtr2')
devtools::install('~/cs/code/r/bhsdtr2')
devtools::document('~/cs/code/r/bhsdtr2')
devtools::install('~/cs/code/r/bhsdtr2')
?cumulative
gabor$stim
m
m2
dim(m2$stanfit)
prod
prod(dim(m2$stanfit)[1:2])
install.packages('TruncatedNormal')
install.packages('randtoolbox')
install.packages('rngWELL')
devtools::install('~/cs/code/r/bhsdtr2')
devtools::install('~/cs/code/r/bhsdtr2')
devtools::install('~/cs/code/r/bhsdtr2')
devtools::install_git('git://github.com/boryspaulewicz/bhsdtr')
n
devtools::install_git('git://github.com/boryspaulewicz/bhsdtr')
sprintf('%d', NA)
sprintf('%d', NULL)
sprintf(' %d ', NULL)
sprintf(' %d ', '')
sprintf('%s', '')
m2
m2.jmap$sdata$delta_prior_random_nu_1
m2.jmap$sdata$delta_prior_random_scale_1
m2.jmap$sdata$delta_prior_fixed_mu
m2.jmap$sdata$delta_prior_fixed_sd
m2.jmap$sdata$delta_prior_random_nu_1
m2.jmap$sdata$delta_prior_random_scale_1
n
