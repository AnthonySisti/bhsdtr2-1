exp(result[1:100,,])
dim(samples.fixef)
apply(samples.fixef[,1,], 2, range)
dim(samples.ranef)
apply(samples.ranef[,,1,1], 2, range)
apply(samples.ranef[,,1,2], 2, range)
dim(samples.ranef)
dim(result)
dim(result.ranef)
dim(result.fixef)
dim(result)
dim(dprim)
apply(dprim[,1,], 2, range)
head(df)
head(df)
head(df)
head(df)
head(df)
devtools::install('~/cs/code/r/bhsdtr2')
head(dr)
head(d)
head(d)
d$id
d$id
head(d)
rid
rid
rid
length(unique(tolower(did)))
length(unique(did))
length(unique(tolower(rid)))
length(unique(rid))
f = files[1]
head(d)
dim(d)
tail(d)
i = 1
i = 1
len
tail(d)
head(df)
f
d[1:10,  1:3]
len
head(df)
i = 1
head(df)
head(df)
df$rating
table(df$rating)
i = 1
part
head(df)
head(df)
head(df)
length(unique(df$id))
length(unique(dr$subject))
n
1
head(df)
predictor.names = function(model, ...){
    vnames = NULL
    for(v in list(...))
        vnames = c(vnames, get_all_vars(model$fixed[[v]], model$data))
    vnames
}

predictor.names(m2, 'delta')
predictor.names = function(model, ...){
    vnames = NULL
    for(v in list(...))
        vnames = c(vnames, names(get_all_vars(model$fixed[[v]], model$data)))
    vnames
}

predictor.names(m2, 'delta')
predictor.names(m2, 'delta', 'gamma')
aggr.formula
head(res)
res.rows
res.rows
df.rows
df$thr
group = NULL
group = NULL
m2$sdata$stim_sign
m2.jmap$resp
m2.jmap$stim
model = m2.jmap
group.name
head(df)
acc
head(model$data)
aggr.formula
model = m2.jmap
head(res)
head(df)
acc.obs
acc.fit
head(df)
model = m2.jmap
group = 1
dprim
crit
dim(res)
res
head(df)
dim(df)
dim(res)
class(df)
acc.obs
head(df)
acc.obs
acc
install.packages('here')
library(here)
devtools::install('~/cs/code/r/bhsdtr2')
devtools::install('~/cs/code/r/bhsdtr2')
cumulative
cum
cum
formula
frm = r ~ duration * order + (1 | id)
frm[-2]
frm[-1]
frm[1]
frm[-3]
form
frm[[2]]
resp
form
frm
frm = r ~ duration * order + (1 | id)
as.character(form)
paste(as.character(form), collapse = ' ')
form
frm
form
cum = function(formula, ...){
    resp = as.character(formula[[2]])
    theta.form = as.formula(paste(c('theta', as.character(formula[-2])), collapse = ' '))
    bhsdtr(c(eta ~ 1, theta.form), as.formula(sprintf('%s ~ 1', resp)), ...)
}

cum = function(formula, ...){
    resp = as.character(formula[[2]])
    theta.form = as.formula(paste(c('theta', as.character(formula[-2])), collapse = ' '))
    bhsdtr(c(mean ~ 1, theta.form), as.formula(sprintf('%s ~ 1', resp)), ...)
}

cum = function(formula, ...){
    resp = as.character(formula[[2]])
    theta.form = as.formula(paste(c('thr', as.character(formula[-2])), collapse = ' '))
    bhsdtr(c(mean ~ 1, theta.form), as.formula(sprintf('%s ~ 1', resp)), ...)
}

devtools::install('~/cs/code/r/bhsdtr2')
devtools::install('~/cs/code/r/bhsdtr2')
devtools::install('~/cs/code/r/bhsdtr2')
devtools::install('~/cs/code/r/bhsdtr2')
devtools::install('~/cs/code/r/bhsdtr2')
devtools::install('~/cs/code/r/bhsdtr2')
devtools::document('~/cs/code/r/bhsdtr2')
devtools::install('~/cs/code/r/bhsdtr2')
?cumulative
gabor$stim
m
m2
dim(m2$stanfit)
prod
prod(dim(m2$stanfit)[1:2])
install.packages('TruncatedNormal')
install.packages('randtoolbox')
install.packages('rngWELL')
devtools::install('~/cs/code/r/bhsdtr2')
devtools::install('~/cs/code/r/bhsdtr2')
devtools::install('~/cs/code/r/bhsdtr2')
devtools::install_git('git://github.com/boryspaulewicz/bhsdtr')
n
devtools::install_git('git://github.com/boryspaulewicz/bhsdtr')
sprintf('%d', NA)
sprintf('%d', NULL)
sprintf(' %d ', NULL)
sprintf(' %d ', '')
sprintf('%s', '')
m2
m2.jmap$sdata$delta_prior_random_nu_1
m2.jmap$sdata$delta_prior_random_scale_1
m2.jmap$sdata$delta_prior_fixed_mu
m2.jmap$sdata$delta_prior_fixed_sd
m2.jmap$sdata$delta_prior_random_nu_1
m2.jmap$sdata$delta_prior_random_scale_1
n
setenv
1
Yes
3
library(digest)
3
n
n
install.packages('digest')
install.packages('digest')
1
Yes
n
install.packages('rlang')
install.packages('rlang')
install.packages('rlang')
1
Yes
n
install.packages('testthat', ask = F)
install.packages('testthat', ask = F)
install.packages('testthat', ask = F)
1
Yes
n
1
m
head(pointest)
head(pointest)
head(obs)
dim(obs)
f
f
vs
f
f
head(df)
head(df)
obs
?aggregate
obs
head(adf(
)
__
head(adf)
head(adf)
head(adf)
model
head(adf)
n
cat(parsed)
m$model
model
m$model
cat(parsed)
bounds.sd
names(random)
cat(parsed)
library(bhsdtr2)
devtools::document()
devtools::install()
sdt.hit.fa
cum1.s1
sum(cum1.s1)
probs1.s
probs1.s1
sum(probs1.s1)
probs1.s1
sum(probs1.s1)
sum(probs1.s1)
probs1.s2
probs1.s2
sum(probs1.s2)
rmultinom
?rmultinom
res = rmultinom(n, 1, probs1.s1)
dim(res)
head(res)
apply(res, 1, function(x)which(x == 1))
apply(res, 2, function(x)which(x == 1))
kb2
hit1
fa1
hit2
hit2
fa2
hit2
fa2
dim(d)
names(m$sdata)
cat(m$code)
cat(m$code)
parse.decl.bounds = function(chunk, lb.name, ub.name, sdata){
    lb = sdata[[lb.name]][1]
    ub = sdata[[ub.name]][1]
    bounds = NULL
    if(!is.na(lb))
        bounds = c(bounds, sprintf('lower=%f', lb))
    if(!is.na(ub))
        bounds = c(bounds, sprintf('upper=%f', ub))
    if(!is.null(bounds)){
        bounds = sprintf('<%s>', paste(bounds, collapse = ','))
    }else{
        bounds = ''
    }
    gsub('<BOUNDS>', bounds, chunk)
}

process.chunk = function(header, chunk, model, links, fixed, random, sdata){
    parsed = NULL
    test = regmatches(header, regexpr('\\{.*\\}', header))
    if(length(test) == 0){
        test = parse(text = 'TRUE')
    }else{
        test = parse(text = test)
    }
    process = T
    ## if(length(test) != 0)
    ##     process = eval(parse(text = test))
    ## if(process){
    if(grepl('fpariter', header)){
        for(par in names(fixed)){
            if(eval(test)){
                if(grepl('fbounds', header)){
                    chunk.bounds = parse.decl.bounds(chunk, sprintf('%s_prior_fixed_lb', par),
                                                     sprintf('%s_prior_fixed_ub', par), sdata)
                }else{
                    chunk.bounds = chunk
                }
                parsed = c(parsed, gsub('PAR', par, chunk.bounds))
            }
        }
    }else if(grepl('rpariter', header)){
        for(par in names(random)){
            chunk.par = gsub('PAR', par, chunk)
            if(grepl('gpariter', header)){
                for(g in 1:length(random[[par]])){
                    if(grepl('sdbounds', header)){
                        chunk.par.bounds = parse.decl.bounds(chunk.par, sprintf('%s_prior_random_sd_lb_%d', par, g),
                                                             sprintf('%s_prior_random_sd_ub_%d', par, g), sdata)
                    }else{
                        chunk.par.bounds = chunk.par
                    }
                    parsed = c(parsed, gsub('G', g, chunk.par.bounds))
                }
            }else{
                parsed = c(parsed, chunk.par)
            }
        }
    }else if(eval(test)){
        parsed = chunk
    }
    paste(parsed, collapse = '\n')
}

parse.model.code = function(m){
    lines = stan.template('ordinal_new.stan')
    bounds.fe = bounds.sd = list()
    for(par in names(m$fixed)){
        lb.fe.name = sprintf('%s_prior_fixed_lb', par)
        ub.fe.name = sprintf('%s_prior_fixed_ub', par)
        bounds.fe[[par]] = ''
        if(!is.na(m$sdata[[lb.fe.name]]))
            bounds.fe[[par]] = paste(bounds.fe[[par]], 'l', sep = '')
        if(!is.na(m$sdata[[ub.fe.name]]))
            bounds.fe[[par]] = paste(bounds.fe[[par]], 'u', sep = '')
    }
    for(par in names(m$random)){
        bounds.sd[[par]] = rep('', length(m$random[[par]]))
        for(g in 1:length(m$random[[par]])){
            lb.sd.name = sprintf('%s_prior_random_sd_lb_%d', par, g)
            ub.sd.name = sprintf('%s_prior_random_sd_ub_%d', par, g)
            if(!is.na(m$sdata[[lb.sd.name]]))
                bounds.sd[[par]][g] = paste(bounds.sd[[par]][g], 'l', sep = '')
            if(!is.na(m$sdata[[ub.sd.name]]))
                bounds.sd[[par]][g] = paste(bounds.sd[[par]][g], 'u', sep = '')
        }
    }
    parsed = ''
    l = 1
    while(l <= length(lines)){
        if(grepl('//cb', lines[l])){
            cb = l
            for(k in (l + 1):length(lines))
                if(grepl('//ce', lines[k]))break
            ce = k
            header = lines[cb]
            chunk = paste(lines[(cb + 1):(ce - 1)], collapse = '\n')
            processed = process.chunk(header, chunk, m$model, m$links, m$fixed, m$random, m$sdata)
            if(processed != "")
                parsed = paste(parsed, processed, sep = '\n')
            l = k + 1
        }else{
            parsed = paste(parsed, lines[l], sep = '\n')
            l = l + 1
        }
    }
    parsed
}

cat(stan.template('ordinal_new.stan'))
bhsdtr2::stan.template
stan.template = function(fname){
    paste(readLines(stan.file(fname)), collapse = '\n')
}

stan.file = function(fname){
    sprintf('%s/stan_templates/%s', path.package('bhsdtr2'), fname)
}

cat(stan.template('ordinal_new.stan'))
n
n
parse.model.code
n
parse.model.code
n
n
sdt.hit.fa(.95, -.54)
dim(d)
m1$sdata$delta_prior_fixed_mu
m1$sdata$delta_prior_fixed_sd
dcurve(dlnorm(x, .5, 1), 0, 10)
curve(dlnorm(x, .5, 1), 0, 10)
curve(dlnorm(x, 1, 1), 0, 10)
curve(dlnorm(x, 1, .5), 0, 10)
curve(dlnorm(x, .5, .5), 0, 10)
curve(dlnorm(x, 2, .5), 0, 10)
curve(dlnorm(x, 1, .5), 0, 10)
curve(dlnorm(x, 1, 1), 0, 10)
curve(dlnorm(x, 1, 2), 0, 10)
curve(dlnorm(x, 1, 1), 0, 10)
m1$sdata$delta_prior_fixed_mu
m1$sdata$delta_prior_fixed_mu[1,1] = 1
m1 = fit(m1)
curve(dlnorm(x, .5, 1), 0, 10)
dim(samples(m1.id_log, 'dprim'))
n
m
bounds.fe
m$sdata
bounds.fe
bounds.sd
cat(lines[1:10])
lines[1:10]
model
cat(parsed)
devtools::install('~/cs/code/r/bhsdtr2')
devtools::install('~/cs/code/r/bhsdtr2')
n
bhsdtr
devtools::install('~/cs/code/r/bhsdtr2')
library(bhsdtr2)
devtools::install('~/cs/code/r/bhsdtr2')
bounds.sd
devtools::install('~/cs/code/r/bhsdtr2')
devtools::install('~/cs/code/r/bhsdtr2')
devtools::install('~/cs/code/r/bhsdtr2')
library(bhsdtr2)
m$sdata$delta_prior_random_scale_1
devtools::install('~/cs/code/r/bhsdtr2')
sim_sdt
m$links
devtools::install('~/cs/code/r/bhsdtr2')
n
find_guessers
gabor$ac
head(d)
head(d)
stan
data$acc
fit
m1
class(m1)
n
my.install.packages('bridgesampling')
library(V8)
update.packages(ask = F)
install.packages('reshape2')
my.install.packages('reshape2')
my.install.packages('shinystan')
my.install.packages('V8')
m
devtools::install('bhsdtr2')
devtools::install('~/cs/code/r/bhsdtr2')
class(m)
plot.bhsdtr_model
plot.bhsdtr_model(m)
plot(m)
is.object(m)
devtool::document()
devtool::document('~/cs/code/r/bhsdtr2')
devtools::document('~/cs/code/r/bhsdtr2')
devtools::install('~/cs/code/r/bhsdtr2')
)
head(d)
96 / 3
96 / 2
names(s)
d$stim
df$stim
sdata$stim_sign
thr
lengt(s)
length(s)
dim(d2)
n
